#!/usr/bin/env python3
"""
Script de d√©ploiement pour corriger la base de donn√©es de production
"""

import os
import subprocess
import sys

def deploy_database_fix():
    """D√©ploie la correction de la base de donn√©es"""
    
    print("üöÄ D√©ploiement de la correction de base de donn√©es...")
    
    # V√©rifier si nous sommes sur le serveur de production
    if not os.getenv('DATABASE_URL'):
        print("‚ùå Variable d'environnement DATABASE_URL non trouv√©e")
        print("üí° Ce script doit √™tre ex√©cut√© sur le serveur de production")
        return False
    
    try:
        # Option 1: Ex√©cuter le script Python de migration
        print("üîß Ex√©cution du script de migration Python...")
        result = subprocess.run([sys.executable, "migrate_postgresql.py"], 
                              capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ Migration Python r√©ussie")
            print(result.stdout)
            return True
        else:
            print("‚ùå √âchec de la migration Python")
            print(result.stderr)
            
            # Option 2: Ex√©cuter le script SQL directement
            print("üîß Tentative avec le script SQL...")
            return execute_sql_script()
            
    except Exception as e:
        print(f"‚ùå Erreur lors du d√©ploiement: {e}")
        return False

def execute_sql_script():
    """Ex√©cute le script SQL directement"""
    
    try:
        import psycopg2
        
        database_url = os.getenv('DATABASE_URL')
        conn = psycopg2.connect(database_url)
        conn.autocommit = True
        c = conn.cursor()
        
        # Lire et ex√©cuter le script SQL
        with open('fix_database.sql', 'r') as f:
            sql_script = f.read()
        
        # Ex√©cuter chaque commande SQL s√©par√©ment
        commands = [cmd.strip() for cmd in sql_script.split(';') if cmd.strip()]
        
        for command in commands:
            if command.upper().startswith('SELECT'):
                # Pour les SELECT, afficher les r√©sultats
                c.execute(command)
                results = c.fetchall()
                print(f"üìã R√©sultat: {results}")
            else:
                # Pour les autres commandes, les ex√©cuter
                c.execute(command)
                print(f"‚úÖ Commande ex√©cut√©e: {command[:50]}...")
        
        conn.close()
        print("üéâ Script SQL ex√©cut√© avec succ√®s !")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'ex√©cution du script SQL: {e}")
        return False

if __name__ == "__main__":
    success = deploy_database_fix()
    if success:
        print("\n‚ú® La base de donn√©es de production est maintenant corrig√©e !")
        print("üéØ Red√©marrez votre bot pour que les changements prennent effet.")
    else:
        print("\n‚ùå √âchec du d√©ploiement.")
        print("üí° Vous pouvez ex√©cuter manuellement le script SQL sur votre base de donn√©es.")
        sys.exit(1)
